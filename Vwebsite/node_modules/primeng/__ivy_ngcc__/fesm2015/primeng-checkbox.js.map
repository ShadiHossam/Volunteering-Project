{"version":3,"file":"primeng-checkbox.js","sources":["../../src/app/components/checkbox/checkbox.ts","../../src/app/components/checkbox/primeng-checkbox.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ViewChild,ElementRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl} from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Checkbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-checkbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-checkbox p-component': true, 'p-checkbox-checked': checked, 'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [readonly]=\"readonly\" [value]=\"value\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                (change)=\"handleChange($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.required]=\"required\">\n            </div>\n            <div class=\"p-checkbox-box\" (click)=\"onClick($event,cb,true)\"\n                        [ngClass]=\"{'p-highlight': checked, 'p-disabled': disabled, 'p-focus': focused}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"checked ? checkboxIcon : null\"></span>\n            </div>\n        </div>\n        <label (click)=\"onClick($event,cb,true)\" [class]=\"labelStyleClass\"\n                [ngClass]=\"{'p-checkbox-label': true, 'p-checkbox-label-active':checked, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\"\n                *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [CHECKBOX_VALUE_ACCESSOR],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./checkbox.css']\n})\nexport class Checkbox implements ControlValueAccessor {\n\n    @Input() value: any;\n\n    @Input() name: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() binary: boolean;\n    \n    @Input() label: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n    \n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() labelStyleClass: string;\n    \n    @Input() formControl: FormControl;\n    \n    @Input() checkboxIcon: string = 'pi pi-check';\n    \n    @Input() readonly: boolean;\n\n    @Input() required: boolean;\n\n    @ViewChild('cb') inputViewChild: ElementRef;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    model: any;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n        \n    focused: boolean = false;\n    \n    checked: boolean = false;\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    onClick(event,checkbox,focus:boolean) {\n        event.preventDefault();\n        \n        if (this.disabled || this.readonly) {\n            return;\n        }\n        \n        this.checked = !this.checked;\n        this.updateModel(event);\n        \n        if (focus) {\n            checkbox.focus();\n        }\n    }\n    \n    updateModel(event) {\n        if (!this.binary) {\n            if (this.checked)\n                this.addValue();\n            else\n                this.removeValue();\n\n            this.onModelChange(this.model);\n            \n            if (this.formControl) {\n                this.formControl.setValue(this.model);\n            }\n        }\n        else {\n            this.onModelChange(this.checked);\n        }\n        \n        this.onChange.emit({checked:this.checked, originalEvent: event});\n    }\n    \n    handleChange(event)Â {\n        if (!this.readonly) {\n            this.checked = event.target.checked;\n            this.updateModel(event);\n        }\n    }\n\n    isChecked(): boolean {\n        if (this.binary)\n            return this.model;\n        else\n            return this.model && this.model.indexOf(this.value) > -1;\n    }\n\n    removeValue() {\n        this.model = this.model.filter(val => val !== this.value);\n    }\n\n    addValue() {\n        if (this.model)\n            this.model = [...this.model, this.value];\n        else\n            this.model = [this.value];\n    }\n    \n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n        this.onModelTouched();\n    }\n\n    focus() {\n        this.inputViewChild.nativeElement.focus();\n    }\n     \n    writeValue(model: any) : void {\n        this.model = model;\n        this.checked = this.isChecked();\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Checkbox],\n    declarations: [Checkbox]\n})\nexport class CheckboxModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}