import { __decorate } from "tslib";
import { Directive, ElementRef, Renderer2, OnInit, OnDestroy, HostBinding, AfterViewInit, Input } from '@angular/core';
import { ShowHideService } from './show-hide.service';
var ShowHideInputDirective = /** @class */ (function () {
    function ShowHideInputDirective(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
    }
    ShowHideInputDirective.prototype.registerElementId = function () {
        if (!this.id) {
            throw new Error("No attribute [id] found.");
        }
        this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
    };
    ShowHideInputDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.registerElementId();
        this.service
            .getObservable(this.id)
            .subscribe(function (show) {
            return _this.renderer.setAttribute(_this.el.nativeElement, 'type', show ? 'text' : 'password');
        });
    };
    ShowHideInputDirective.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideInputDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], ShowHideInputDirective.prototype, "id", void 0);
    ShowHideInputDirective = __decorate([
        Directive({
            selector: 'input[showHideInput]'
        })
    ], ShowHideInputDirective);
    return ShowHideInputDirective;
}());
export { ShowHideInputDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaG93LWhpZGUtcGFzc3dvcmQvIiwic291cmNlcyI6WyJsaWIvc2hvdy1oaWRlLWlucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkgsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBS3REO0lBV0UsZ0NBQ1UsT0FBd0IsRUFDeEIsRUFBYyxFQUNkLFFBQW1CO1FBRm5CLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQ3hCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO0lBQ3hCLENBQUM7SUFYRSxrREFBaUIsR0FBekI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztTQUM3QztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFRRCx5Q0FBUSxHQUFSO1FBQUEsaUJBT0M7UUFOQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTzthQUNULGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2FBQ3RCLFNBQVMsQ0FBQyxVQUFBLElBQUk7WUFDYixPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQXJGLENBQXFGLENBQ3RGLENBQUM7SUFDTixDQUFDO0lBRUQsNENBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7Z0JBbEJrQixlQUFlO2dCQUNwQixVQUFVO2dCQUNKLFNBQVM7O0lBWnBCO1FBQVIsS0FBSyxFQUFFO3NEQUFZO0lBRlQsc0JBQXNCO1FBSGxDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxzQkFBc0I7U0FDakMsQ0FBQztPQUNXLHNCQUFzQixDQStCbEM7SUFBRCw2QkFBQztDQUFBLEFBL0JELElBK0JDO1NBL0JZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkluaXQsIE9uRGVzdHJveSwgSG9zdEJpbmRpbmcsIEFmdGVyVmlld0luaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFNob3dIaWRlU2VydmljZSB9IGZyb20gJy4vc2hvdy1oaWRlLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtzaG93SGlkZUlucHV0XSdcbn0pXG5leHBvcnQgY2xhc3MgU2hvd0hpZGVJbnB1dERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgQElucHV0KCkgaWQ6IHN0cmluZztcblxuICBwcml2YXRlIHJlZ2lzdGVyRWxlbWVudElkKCkge1xuICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBhdHRyaWJ1dGUgW2lkXSBmb3VuZC5gKTtcbiAgICB9XG4gICAgdGhpcy5zZXJ2aWNlLnNldFNob3codGhpcy5pZCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnR5cGUgIT09ICdwYXNzd29yZCcpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzZXJ2aWNlOiBTaG93SGlkZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcbiAgKSB7ICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5yZWdpc3RlckVsZW1lbnRJZCgpO1xuICAgIHRoaXMuc2VydmljZVxuICAgICAgLmdldE9ic2VydmFibGUodGhpcy5pZClcbiAgICAgIC5zdWJzY3JpYmUoc2hvdyA9PlxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICd0eXBlJywgc2hvdyA/ICd0ZXh0JyA6ICdwYXNzd29yZCcpXG4gICAgICApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19